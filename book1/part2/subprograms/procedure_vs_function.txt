Отличие процедуры от функции

Процедура –– произвольный набор действий, но связанные между собой.
У процедуры отдельный оператор –– procedure <Name>.

procedure SomeProc;
procedure SomeProcWithParams(x, y: integer);
procedure SomeProcWithParams(x: char; y: integer);

вызов:

----------------------------
SomeProc;
SomeProcWithParams(1, 2);
SomeProcWithParams('x', 1);
----------------------------

SomeProcWithParams(1, 2); – имя процедуры + (возможно) список параметров в скобках – оператор вызова процедуры.

Параметры, которые указываются при описании подрограммы – список формальных параметров.
Параметры, котоыре указываются при вызове подрограммы (передаются в параметры подпрограммы) – список фактических параметров.


Что происходит во время вызова процедуры?

Компьютер запоминает адрес того места в памяти,
где в программе встретилась инструкция вызова,
после чего передаёт управление вызываемой подпрограмме,
т.е. переходит к исполнению её машинного кода.
Когда программа, отработав, завершается,
запомненный перед её вызовом адрес возврата используется,
чтобы вернуть управление туда, откуда произошёл вызов,
точнее, на следующую после вызова инструкцию.

Описание процедур или функций происходит между заголовком программы и главной программой. Это назвается раздел описания.

--------------------------------------
program testprog;

pocedure SomeProc / function SomeFunc;

begin
	SomeProc / SomeFunc
end.
--------------------------------------


Функция

Функция –– вычисление какого-либо значения.
Вызываются они из арифмитических соображений,
сами их вызовы тоже представляют собой арифмитические выражения.

Функция возвращает управление вызывающему фрагменты программы,
сообщая вычисленное значение. Функция возвращает какое-то значение.

--------------------------------------
function Cube(x: real): real;
begin
	Cube := x * x * x
end;
--------------------------------------

Заголовок функции начинается с ключевого слова function.
Затем идёт имя и список параметров.
После двоеточия указывается тип возвращаемого значения.


Вызов процедуры – отдельный оператор специального вида.
Функции – немного иное. Вызов в коде выглядит также – имя и параметры, если имеются.
Но отличие происходит в вызове функции как таковой.
Вызов функции – выражение, имеющий тип, совпадающий с указанным для функции типом возвращаемого значнеия.
Т.е. возвращаемое значение нужно куда-то пристроить, а скорее присвоить его переменной.

Вызов:

--------------------------------------
a := Cube(2.7);
--------------------------------------


Процесс вызова функции такой же как и у процедуры – временно передаётся управление фрагменту кода в теле функции.
Отличие только в том, что перед возвращением управления, тому, кто её вызвал,
функция фиксирует значение из-за котрого её вызывали.
Это значение отдаётся вызывающему вместе с управлением.
Это называется – функция возвращает значение.
А само значение – возвращаемое.


Функции в Паскале могут возвращать практически любой тип.
Исключение – семейство файловых типов переменных. Которые нельзя ни передать в подпрограммы по значению, ни вернуть их, ни присвоить.
P.S. Рассмотрятся позже в главе 2.9.

Функция может вернуть тип boolean и тем самым может стоить сама условием в операторе ветвления или циклов.

--------------------------------------
function IsLatinLetter(ch: char): boolean;
begin
	isLatinLetter :=
		((ch => 'A') and (ch <= 'Z')) or
		((ch => 'a') and (ch <= 'z'))
end;

begin
	if IsLatinLetter('c') then
		// Do smth
end.
---------------------------------------


Параметры

Параметры в подпрограммах также называются параметры-значения.
Такие параметры являются локальными переменными в рамках подпрограммы,
в которую передали значение при вызове подпрограммы.

Если передать значение какой-нибудь переменной в параметры подпрограммы,
то значение копируется и никаких влияний на внешнюю переменную не происходит.

Есть другой тип параметров в подпрограммах – параметры-переменные.
Это такой тип параметров, которые позволяют изменять значение переменных извне
внутри подпрограммы.
При передачи переменной в параметры подпрограммы, передаётся не само значение,
а переменная как таковая (область памяти, где хранится значение).
Параметры-переменные не копируют свои значения.

----------------------------------------
procedure powers(x: real; var quad, cube, fourth, fifth: real);
begin
	quad := x * x;
	cube := quad * x;
	fourth := cube * x;
	fifth := fourth * x
end;
----------------------------------------

В параметрах процедуры powers ключевое слово var позволяет параметр превратить
в параметр-переменную.
Вызывается это так:

----------------------------------------
var
	p, q, r, t: real;

begin
	{ ... }

	powers(17.5, p, q, r, t)
end.
----------------------------------------


Глобальные переменные

Глобальные переменные – перменные, описанные в программе вне подпрограмм,
видны начиная от того места, где они описаны и до конца текста программы.

Если переменная будет использоваться только в главной части программы,
то описать её лучше перед началом главной части, чтобы только там она и была видна.
Такие переменные не совсем глобальные, но локальные для главной части программы.

Глобальные переменные лучше не использовать для связи между различными подпрограммами.
К примеру, вызывать поочереди подпрограммы и вносить/извлекать данные изглобальной переменной.
Связь через подпрограммы лучше всего поддерживать через передачу значений через параметры-значений и возвращать необходимое полученное значение.
Или при необходимости использовать параметры-переменные.
