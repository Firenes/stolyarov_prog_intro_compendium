Блочный ввод-вывод

В отличии от оригинального Паскаля, Free Pascal поддерживает
нетипизированные файлы, позволяющие производить чтение и запись большими
порциями.

Информацию, читаемую/записываемую из нетипизированного файла можно
разместить в произвольной области памяти, т.е. для этого подойдёт
любая переменная.

При открытии нетипизированного файла указывается размер блока в байтах,
а при чтении и записи – количество блоков, которые нужно прочитать или
записать.
Чаще всего в качестве размера блока указывается число 1, что позволяет
выполнять чтение и запись произвольных фрагментов.

Файловая перменная для блочного ввода-вывода имеет тип `file`:

---------------------------------
var
	f: file;
---------------------------------

При работе с нетипизированными файлами, как и с другими, сначала назначается
имя – `assign()`.
Открываются – `reset()` и `rewrite()`. Но с нетипизированными файлами
необходимо использовать ещё второй параметр – целое число – размер блока.
По умолчанию размер блока равен 128 байтам. Но как описано выше, чаще
используется 1 байт.


Для чтения и записи из нетепизированных файлов используются процедуры
`BlockRead(var file, var buf, count, var result)` и
`BlockWrite(var file, var buf, count, var result)`.

`file` – файловая переменная;
`buf` – переменная произовльного типа и размера (кроме файловых переменных),
в которую будет помещена информация, прочитанная из файла, либо из которой
будет взята информация для записи в файл.
`count` – целое число, задающее количество блоков для прочтения/записи.
Произведение этого числа на используемый размер блока не должно превосходить
размер переменной, заданной вторым параметром.
`result` – переменная (longint, int64, word, integer), в которую записывают
количество блоков, которое реально удалось прочитать/записать.
Этот результат может быть меньше, чем ожидали, т.к. информации в файле
осталось меньше, чем прочитали.

---------------------------------
const
	BufSize = 100;
var
	f: file;
	buf: array[1...BufSize] of char;
	res: integer;
begin
	{ ... }
	BlockRead(f, buf, BufSize, res);
	{ ... }
	BlockWrite(f, buf, BufSize, res);
	{ ... }
end.
---------------------------------

Если при использовании `BlockRead()` в переменной `res` после вызова
процедуры будет значение 0, значит возникла ситуация "конца файла".

Пример работы с такими файлами см. 2.9.4_block_cp.pas
