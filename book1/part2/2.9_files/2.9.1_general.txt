Общие сведения

Для работы с файлом, сначала нужно его открыть.
Происходит обращение к операционной системе с намерением открыть файл.
Указывается какой файл интере

Как происходит работа с файлом:
– Обращение к операционной системе с намерением открыть файл.
– Задаётся имя файл.
– Задаётся режим работы файла (чтение, запись или чтение и запись).
– После открытия файла, создаётся новый поток ввода-вывода, связанный с
  файлом на диске (наряду со стандартным).
  Операции с таким потоком проводятся как и со стандартным схожи (на уровне
  операционной системы – совпадают).

Потоки ввода-вывода для открывающихся файлов и от стандартных необходимо
отличать.

В Паскале для этого есть "файловые переменные".
Для описания переменных есть целое семейство особых файловых типов.
Переменные файлового представляют собой единственный вариант выражения
файлового типа.
Передавать файловые переменные в подпрограммы можно только через
var-параметры.
Значение в файловой переменной мы узнать не можем. Они лишь помогают
отличать количество одновременно активных потоков ввода-вывода для файлов.

Для работы с файлом необходимо определиться с его типом файловой переменной.
– Текстовый. Файловая переменная типа `text`;
– С абстрактной последовательностью байтов, с возможностью записать и
  прочитать любой его фрагмент с помощью "операцией блочного чтения и
  блочной записи". Файловая переменная типа `file`;
– Файл состоит из блоков информации фиксированной длины, соответствующие
  машинному представлению в памяти значений какого-то типа.
  Необходим "типизированный файл". Файловые переменные – `file of integer`,
  `file of real` или `file of myrecord` (myrecord – имя описанного ранее
  типа записи).

С одним файлом можно хоть двумя, хоть тремя способами. Зависит не от файла,
а от задачи.

В Паскале работа происходит так:

---------------------------------------
var
	f1: text;
begin
	assign(f1, 'data.txt');
end.
---------------------------------------

f1 – имя файловой переменной с типом 'text' для работы с текстовым файлом.

Процедура `assign(var file, string)` принимает файловую переменную и путь
до файла. В примере, `data.txt` находится в текущей директории.
Если в строке с файлом указать "/", то рассматриваться будет как абсолютное
имя файла от корневой директории. 

Сама процедура `assign()` не пытается открыть файл, не проверить его. Она
лишь связывает файл с переменной.
Вызвать это процедуру можно снова. При этом старая связь разрушится, а
новая построится.

После открытия файла. Можно с ним работать.

Процедура `reset()` – для простого чтения файла. Если файла нет – ошибка.
Процедура `rewrite()` – если файла нет – создаться. Если есть – файл
очистится.
Процеруда `append()` – добавление в файл. Для типизированных и блочных
файлов не работает.

Работа с файлами часто может вызывать ошибки, но компилятор Free Pascal
очень плохо их обрабатывает, поэтому стоит делать это самостоятельно.
Делается с помощью `{$I-}` и `IOResult`.

Для чтения и записи текстовых и типизированных файлов используются
`read()` и `write()`, также `readln()` и `writeln()`.

---------------------------------------
write(f1, x);
---------------------------------------

`write()` записывает в файл с помощью файловой переменной `f1` текстовое
представление числа в `x: intger` (последовательность байтов с кодами
символов-цифр).
Если `f1` – типизированный фал, то записано было бы 2 байта – машинное
представление числа типа integer.

`eof`, `SeekEof` также применяются. `SeekEof` – только для текстовых файлов.
Принимают в параметр файловую переменную:
`eof(f1)`, `SeekEof(f1)`.

Для работы с блочными файлами используются `BlockRead()` и `BlockWrite()`.

После работы с файлом, его необходимо закрыть с помощью процедуры
`close(var file)`.

Если после закрытия файла сделать `reset` или `rewrite` с той же самой
файловой переменной, будет открыт файл с тем же самым именем, но
можно переназначить имя, повторно вызвав `assign`.

Примеры смотри в 2.9.1_hellofile1.pas и 2.9.1_hellofile2.pas

Открытый файл характеризуется текущей позицией, которая устанавливается на
начало файла.
При открытии текстового файла с помощью процедуры `append()` – на его конец.
Каждая операция ввода/вывода сдвигает текущую позицию на количество
введёных/выведеных байтов.
Последовательные операции чтения из одного и того же файла прочитают не
одни и те же данные, а последовательные порции данных, находящиеся в файле,
одну за другой.
(Как я понимаю, при открытии файла задаётся уже начальная позиция, которая
едина для всех операций, пока файл не закроется).
В некоторых случаях текущую позицию открытого файла можно изменить.
