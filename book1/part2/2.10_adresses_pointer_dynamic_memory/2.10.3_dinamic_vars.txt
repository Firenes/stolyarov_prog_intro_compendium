Динамические переменные

Динамическиая переменная – переменная (область памяти), которая создаётся
во время выполнения программы.
Имени у переменной нет.
Работа с ними происходит через адрема, хранящиеся в указателях.

Память под динамическую переменную выделяется в "куче" (heap).
При уничтожении динамической переменной память возвращается обратно в "кучу"
и может быть выделена под другую динамическую переменную.

Если место в куче заканчивается, то программа сама обращается к операционной
системе за дополнительной памятью.

Уменишить размер кучи невозможно, затребованная память останется в
распоряжении программы, пока она не завершится.
Если надо создать новую динамическую переменную, а старую уничтожить, то
стоит сначало уничтожить старую, а потом создать новую. Это позволяет
сэкономить размер кучи.


Создаётся динамическая переменная с пмомощью псевдопроцедуры `new()`,
которая применяется к типизированному указателю.

При вызове происходит:
– Из кучи выделяется область памяти нужного размера, в которой будет
  динамическая переменная (сама динамическая переменная и есть область
  памяти);
– В заданный указатель заностся адрес созданной переменной.

----------------------------------
var
	p: ^string;
begin
	new(p);
end.
----------------------------------

Объявляется указатель `p` с типом `string`. Затем вызывается метод `new(p)`,
который создаётся динамическую переменную с типом `string`.

При выполнении `new` в куче выделяется память в 256 байт.
В переменную `p` заносится адрес этой области памяти.

В таком случае получается, что создана "безымянная" переменная типа `string`
доступ к которой происходит через её адрес.
`p^` как раз обеспечивает этот доступ.

----------------------------------
p^ := 'This is a string, which resides in the heap';
----------------------------------

В схеме можно отобразить примерно так:

            -----------------------------------------------------
p --------> |addr| 'This is a string, which resides in the heap'|
            -----------------------------------------------------

Удаление динамической переменной производится с помощью псевдопроцедуры
`dispose`, где параметр – адрес переменной, которую нужно убить.

----------------------------------
dispose(p);
----------------------------------

При этом значение указателя `p` не меняется.
Но происходит возвращение памяти, которая была заняти под переменную `^p`,
обратно в кучу. Условно меняется статус с занятой на свободную.
Далее можно снова вызвать `new(p)`.


ВАЖНО!
Динамическая переменная не привязана к конкретному указателю.

----------------------------------
var
	p, q: ^string;
begin
	new(p);
	q := p
end.
----------------------------------

При `q := p` `q` и `p` указывают на одну и ту же область памяти, т.е.
имеют один и тот же адрес.
`p` можно будет снова присвоить новый адрес, а со старым работать через `q`.
При завершении работы вызвать `dispose(q)`.


Если для динамической переменной забыть вызвать `dispose` и повторно
вызвать `new`, то потеряется адрес к памяти, а следом и к данным по этому
адресу.
"Потерянная" память называется "мусором" (garbage).
Процесс образования мусора называется "утечкой памяти".
Если не следить за ней, то в одночасье память закончится.


Использование динамической памяти отлично подходит для создания
"связанных динамических структур данных"
