Указатели в Паскале

В Паскале применяются "типизированные указатели" – переменные, хранящие
адрес, относительного которого точно известно, переменная какого типа
расположена в соответствующей области памяти.

Для этого используется символ `^` (в оригинальном виртовском Паскале
использовался символ "стрелка вверх", но такого в ASCII нет).

---------------------------------
var
	p: ^integer;
	q: ^real;
---------------------------------

`p` хранит адрес переменной типа `integer`.
`q` хранит адрес переменной типа `real`.


Адрес перменной можно получить с помощью "операции взятии адреса" – `@`.
`@x` – даёт адрес переменной `x`.

---------------------------------
var
	r: real;
	p: ^real;

p := @r;
---------------------------------

В переменную `p` кладётся адрес переменной `r`.

Операцию взятия адреса можно применить к любой переменной, а не только к
такой, у которой есть имя-идентификатор.
С её помощью можно получить адрес элемента массива или поля записи;

Для работы с переменной по адресу используется операция "dereference" или
"разыменование" или "обращение по адресу".
Обозначается операция символом `^`, которая ставится после имени указателя
(или после любого адресного выражения).

---------------------------------
p^ := 25.7;
---------------------------------

Значение `25.7` зансётся по адресу, который хранит в себе `p`, т.е.
значение будет в переменной `r`.

---------------------------------
writeln(p^); // 25.7
---------------------------------


В Паскале предусмотрены также "нетипизированные указатели" (и адреса).
Обозначаются типом `pointer`.
Адреса такого типа рассматривает как абстрактные адреса ячеек памяти без
знания типа и значения по адресу.
Хранить такой тип может произвольные адреса.

---------------------------------
var
	ap: pointer;
---------------------------------

Значение по этой переменной можно присвоить переменной любого указательного
типа, что может привести к ошибке.
К примеру, если в `ap` хранится значение типа `string`, а затем присвоить
значение переменной типа `^integer`.


Результатом взятия адреса является нетипизированный адрес. Для корректировки
типа адреса можно использовать в начале программы директиву `{$T+}`.

Имеется встроенная константа `nil` – недействительный адрес, т.е. адрес по
которому в памяти заведомо не может находиться ни одна переменная, и
приваивается переменным указательных типов, чтобы показать, что данный
указатель никуда не указывает.


Выводы:
– если `t` – это некий тип, то `^t` – это тип "указатель на t";
– если `x` – произвольная переменная, то выражение `@x` означает "адрес
  переменной `x`" (по умолчанию нетипизированный, но если применить
  директиву `{$T+}`, то имеющий типа "адрес типа T", где `T` –
  тип переменной `x`);
– если `p` – это указатель (или другое адресное выражение), то p^ обозначает
  "то, на что указаывает p", т.е. на значение;
– словом `nil` обозначается специальный "нулевой адрес", используемый, чтобы
  показать, что данный указатель сейчас ни на что не указывает.
