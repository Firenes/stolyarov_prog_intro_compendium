2.13.4 Отладчик gdb

В ОС Unix для оталдки приложения используется gdb (GNU Debugger).

Отладчик работает с исполняемым файлом, в котором содержится перевод
программы в машинный код.
Машинный код не позволяет узнать конструкцию программы из которой он
получился.
Для решения этой проблемы используется отладочная иформация, которую
компилятор может добавить в исполняемый файл.
Эта информация включает в себя сведения обо всех именах в программе,
имена файлов и номера строк.
Отладочная иснформация занимает много места в исполняемом файле, которая
не влияет на исполнение программы.

Для создания файла с отладочной информацией, нужно специально
скомпилировать программу с ключом `-g`:

```
fpc -g myprog.pas
```


Отладчик gdb представляет собой программу. имеющший собственный встроенный
интерпретатор командной строки.

Отладчик умеет работать в разных режимах:
- Можно подключить к запущенной программе (процессу);
- Можно разобраться по какой причине произошло аварийное завершение
  (для этого необходим core-файл, сгенерированный ОС. С fpc этого
  не происходит);
- Отладчик сам заупскает программу и контролирует ход выполнения с помощью
  команд.

Командная строка gdb оснащена функциями редактирования, автодополнения,
хранение истории введённых команд и поиска по ней.

Запустить отладчик для работы с исполняемым файлом:
```
gdb ./myprog
```

Чтобы передать аргументы:
```
gdb --args ./myprog abra schwabra kadabra
```

После запуска отладчик сообщит свою версию и выдаст приглашение своей
командной строки:
```
(gdb)
```

Начать выполнение программы с помощью команды `start`. Программа запустится,
но остановит на первом же операторе главной части.

Команда `run` запускает программу в обычном режиме. Если всё будет
в порядке, то программа завершится.
Программу можно прервать с помощью `Ctrl-C`, сама программа не будет
уничтожена, вместо этого отладчик остановит её и выдаст приглашение
командной строки.
Если ход выполнения программы под отладчиком аварийно завершится, то
отладчик покажет место в исходном тексте, где оно произошло.

Во время остановки программы:
- Команда `next` – переход на следующую строку;
- Команда `step` – заход внутрь подпрограммы.

Команды `step` и `next` можно повторять, нажимая Enter.

Команда `list` выдаёт 5 строчек перед остановленой и после.
`list 120` – 10 строк, начиная со 120-ой.

В программе можно выставлять точки остановки (breakpoints), входе которых
программа будет остановлена и отладчик выдаст приглашение.
Точки остановки устанавливаются с помощью команды `break`, которой
необходим параметр:
- номер строки / имя файла : номер строки;
- имя подпрограммы.

Паскаль не различает регист в идентификатора, поэтому компилятор приводит
их к верхнему регистру.
Для отладчика необходимо указывать все имена в верхнем регистре.

Точки остановки помечаются номерами.
- `disable 3` – временно выключает точку остановки №3;
- `enable 3` – включит точки остановки №3;
- `ignore 3 550` – игнорирует точку остановки №3 550 раз;
- `cond` – задаёт условие остановки в виде логического выражения:
  `cond 5 I < 100`;
- `info breakpoints` – информация о точках остановки.

`inspect` – команда для просмотра значения переменных.
`set var` – позволяет изменить значение переменной `set var x=50` – меняет
значение переменной `x` на 50.

Команда `bt` (backtrace) – показывает стек трейс вызванных программ.

Пример стектрейса из программы hanoi2:
```
(gdb) bt
  #0 MOVELARGER (RODS=...) at hanoi2.pas:52
  #1 0x080483d9 in SOLVE (N=20) at hanoi2.pas:91
  #2 0x08048521 in main () at hanoi2.pas:110
```

В момент остановки активна процедура MOVELARGER (в тексте программы –
MoveLarger), текущая строка 52 в файле hanoi2.pas.
MoveLarger была вызвана процедурой SOLVE (Solve) на строке 91.
Процедура Solve была вызвана в главной части программы (main()).
gdb ориентирован на Си, поэтому главная часть обозначена функцией `main()`.

Первое число в списке `bt` – номер фрейма. Между ними можно переключаться
с помощью команды `frame`.
`frame 1` – перелючает на подпрограмму `Solve` для просмотра содержимого.

После команды `frame` можно использовать команды `list` и `inspect`.
Они будут выдавать информацию о текущей позиции выбранного фрейма.

Команда `call` позволяет вызвать любую продпрограмму с заданными
параметрами.
gdb не знает о паскалевских строках, поэтому их можно передать только через
переменные, а не напрямую.


Выход из отладчика с помощью команды `quit` или через "конец файла" Ctrl-D.

Можно подключиться к программе из текущего процесса, зная его номер:
```
gdb ./myprogram 2765
```

Исполняемый файл нужен отладчику, чтобы взять из него отладочную информацию,
т.е. сведения о переменныхз и нормерах строк исходного текста.
После подключения отладчик останавливает процесс и ждёт команду.

После выхода из отладчика процесс продолжит выполнение.
